{"version":3,"sources":["Instructions/Instructions.js","Title/Title.js","FightStart/FightStart.js","Message/Message.js","Messages/Messages.js","Choice/Choice.js","Choices/Choices.js","Pair/Pair.js","Inventory/Inventory.js","Scroll/Scroll.js","assets/insults.js","EndExchange/EndExchange.js","FightEnd/FightEnd.js","helpers.js","Pirate.js","assets/starterInsults.js","Player.js","Fight/Fight.js","Win/Win.js","Game/Game.js","Debug.js","Info/Info.js","App.js","index.js"],"names":["Instructions","react_default","a","createElement","className","Title","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","_this2","document","getElementsByClassName","style","animation","setTimeout","updateMode","modeToSet","onClick","Component","defaultProps","FightStart","timeoutId","clearTimeout","fightCounter","Message","_ref","name","msg","length","concat","id","Messages","playerMsg","pirateMsg","playerTurnType","src_Message_Message","Choice","makeChoice","choice","disabled","isChoiceMade","Choices","state","setState","updateRound","_this3","choices","map","c","Choice_Choice_Choice","key","Pair","pair","insult","comeback","Inventory","showInventory","inventory","setInventory","handleToggleInventory","st","insults","toConsumableArray","knownIC","slice","comebacks","allInsults","forEach","index","indexOf","push","filter","getTotalPairs","i","Pair_Pair_Pair","Scroll","overflowY","children","EndExchange","turn","turnType","winner","playerWinClass","FightEnd","initNextRound","randomIndex","len","Math","floor","random","delay","fn","timeout","arguments","undefined","Pirate","round","insultPool","initPool","roundPoints","matchedComeback","pool","playerInsult","getCorrectResponse","getIncorrectResponse","res","starterInsults","player","Player","type","newIC","splice","assign","Fight","exchangeWinner","roundWinner","updatePlayerChoices","clearPrevExchangeDisplays","updateFightCounter","pirate","prevProps","prevState","initPirate","reset","updateChoices","console","log","prevPirateTurnType","removeInsultSpokenByPlayer","isMatch","isNonsenseInsult","swapTurnTypes","addICToKnown","isGameWon","isFightWon","endRound","TIMEOUT_DELAY","addIfUnknown","updateKnownIC","nextTurnType","gridStyles","gridTemplateAreas","FightEnd_FightEnd_FightEnd","src_Messages_Messages","EndExchange_EndExchange_EndExchange","src_Scroll_Scroll","Choices_Choices_Choices","Inventory_Inventory_Inventory","toggleInventory","renderContent","Win","Game","mode","showInstructions","handleShowInstructions","instructions","Title_Title_Title","FightStart_FightStart_FightStart","Fight_Fight_Fight","updatePlayerTurn","updateRoundWin","gameWon","Win_Win_Win","src_Instructions_Instructions","renderMode","Info","href","target","rel","App","Game_Game_Game","Info_Info_Info","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.645a0427.chunk.js","sourcesContent":["import React from 'react';\nimport './Instructions.css';\n\nconst Instructions = () => {\n  return (\n    <div className=\"Instructions container\">\n      <div className=\"Instructions-content container\">\n        <h2>How to Play</h2>\n        <p>Each round, you select an insult from the choices. Your \"pirate opponent\" will comeback and, if it's the correct comeback, it will be their turn to insult you. Then you select a comeback from your choices that matches their insult.</p>\n        <p>An insult that receives the incorrect comeback results in a point for the insulter. The first to 2 consecutive points wins the round.</p>\n        <p>There are 16 insults and comebacks to learn (not including the nonsense ones like \"Boy are you ugly!\" and \"Oh yeah?\").</p>\n        <p>Once you learn them all you win!</p>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Instructions;","import React, { Component } from 'react'\nimport './Title.css';\n\nexport default class Title extends Component {\n  static defaultProps = { modeToSet : 'fightStart'}\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    let title = document.getElementsByClassName('Title')[0];\n    title.style.animation = 'fadeout 2500ms'\n    setTimeout(() => {\n      this.props.updateMode(this.props.modeToSet);\n    }, 2000);\n  }\n\n  render() {\n    return (\n      <div className=\"Title container\">\n        <h1>Insult <span>Swordfighting</span></h1>\n        <h2>Based on the mechanic from The Secret of Monkey Island by Ron Gilbert</h2>\n        <p>How many rounds will it take you to become good enough to challenge the Sword Master?</p>\n        <button className=\"Title-start-btn btn\" onClick={this.handleClick}>Begin!</button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './FightStart.css';\n\nexport default class FightStart extends Component {\n  static defaultProps = { modeToSet : 'fight'};\n\n  componentDidMount() {\n    this.timeoutId = setTimeout(() => {\n      this.props.updateMode(this.props.modeToSet);\n    }, 3000);\n  }\n  componentWillUnmount() {\n    clearTimeout(this.timeoutId)\n  }\n  render() {\n    return (\n      <div className=\"FightStart container\">\n        <h1>Fight {this.props.fightCounter} Begin!</h1>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './Message.css';\n\nconst Message = ({ name, msg }) => {\n  // if (name.length > 0 && msg.length> 0) {\n  if (msg && msg.length > 0) {\n    return <p className={`Message-${name} Message`}><span id=\"speaker-name\">{name}</span>: {msg}</p>\n  } else {\n    return null;\n  }\n};\n\nexport default Message;","import React from 'react';\nimport Message from '../Message/Message';\nimport './Messages.css';\n\nconst Messages = ({ playerMsg, pirateMsg, playerTurnType }) => {\n  const msgs = () => {\n    if (playerTurnType === 'insult') {\n      return (\n        <div>\n          <Message name=\"Player\" msg={playerMsg} />\n          <Message name=\"Pirate\" msg={pirateMsg} />\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <Message name=\"Pirate\" msg={pirateMsg} />\n          <Message name=\"Player\" msg={playerMsg} />\n        </div>\n      );\n    }\n\n\n  }\n  return (\n    <div className=\"Messages\">\n      {msgs()}\n    </div>\n  );\n};\n\nexport default Messages;","import React, { Component } from 'react'\nimport './Choice.css';\n\nexport default class Choice extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.props.makeChoice(this.props.choice);\n  }\n  render() {\n    return (\n      <button className=\"Choice\" onClick={this.handleClick} disabled={this.props.isChoiceMade}>\n        <div className=\"Choice-hovered-choice\"></div>\n        <div className=\"Choice-text\">{this.props.choice}</div>\n      </button>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Choice from '../Choice/Choice';\nimport './Choices.css';\n\nexport default class Choices extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isChoiceMade: false };\n    this.makeChoice = this.makeChoice.bind(this);\n  }\n\n  makeChoice(choice) {\n    this.setState({ isChoiceMade: true }, () => {\n      // re-enable button click after a delay\n      setTimeout(() => {\n        this.setState({ isChoiceMade: false });\n      }, 500);\n    });\n    this.props.updateRound(choice);\n  }\n\n  render() {\n    return (\n      <div id=\"player-choices\" className=\"Choices container\">\n        {\n          this.props.choices.map(c => (\n            (<Choice\n              choice={c}\n              key={c}\n              makeChoice={this.makeChoice}\n              isChoiceMade={this.state.isChoiceMade}\n          />)))\n        }\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './Pair.css';\n\nexport default class Pair extends Component {\n  render() {\n    return (\n      <li className=\"Pair\">\n        <ul>\n          <li>\n            <span>I:</span> {this.props.pair.insult}\n          </li>\n          <li>\n            <span>C:</span> {this.props.pair.comeback}\n          </li>\n        </ul>\n      </li>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Pair from '../Pair/Pair';\nimport './Inventory.css';\n\nexport default class Inventory extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showInventory : false,\n      inventory : this.setInventory()\n    };\n    this.handleToggleInventory = this.handleToggleInventory.bind(this);\n  }\n\n  handleToggleInventory() {\n    this.setState(st => ({ showInventory: !st.showInventory }));\n  }\n\n  setInventory() {\n    const insults = [...this.props.knownIC.insults].slice(0, this.props.knownIC.insults.length - 2);\n    const comebacks = [...this.props.knownIC.comebacks].slice(0, this.props.knownIC.comebacks.length - 3);\n\n    const inventory = [];\n\n    this.props.allInsults.forEach((pair, index)=> {\n      // debugger\n      let insult = '';\n      let comeback = '';\n      if (insults.indexOf(pair.insult) !== -1) {\n        insult = pair.insult;\n      }\n      if (comebacks.indexOf(pair.comeback) !== -1) {\n        comeback = pair.comeback;\n      }\n\n      if (insult !== '' || comeback !== '' ) {\n        inventory.push({ insult, comeback })\n      }\n    });\n\n    return inventory;\n  }\n\n  getTotalPairs() {\n    const pairs = this.state.inventory.filter(pair => {\n      return pair.insult !== '' && pair.comeback !== '';\n    })\n\n    return pairs.length;\n  }\n\n  render() {\n    return (\n      <div className=\"Inventory container\">\n        <div className=\"Inventory-always-visible\">\n          <p className=\"Inventory-total-pairs\">{this.getTotalPairs()} / 16 Pairs Known</p>\n          {/* <button id=\"Inventory-visibility-btn\" onClick={this.handleToggleInventory}>Known Insults &amp; Comebacks<span><i className=\"fas fa-angle-down\"></i></span></button> */}\n        </div>\n        {/* { */}\n          {/* this.state.showInventory && */}\n            <ul className=\"Inventory-content\">\n              {\n                this.state.inventory.map((pair, i) => <Pair pair={pair} key={i} />)\n              }\n            </ul>\n        {/* } */}\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './Scroll.css';\n\nconst Scroll = (props) => {\n  return (\n    <div className=\"Scroll\"\n      style={{ overflowY: 'scroll' }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","const allInsults = [\n  {\n    \"id\" : \"0\",\n    \"insult\" : \"You fight like a Dairy Farmer!\",\n    \"comeback\" : \"How appropriate! You fight like a cow!\"\n  },\n  {\n    \"id\" : \"1\",\n    \"insult\" : \"This is the END for you, you gutter crawling cur!\",\n    \"comeback\" : \"And I've got a little TIP for you, get the POINT?\"\n  },\n  {\n    \"id\": \"2\",\n    \"insult\": \"I've spoken with apes more polite than you!\",\n    \"comeback\": \"I'm glad to hear you attended your family reunion!\"\n  },\n  {\n    \"id\": \"3\",\n    \"insult\": \"Soon you'll be wearing my sword like a shish kebab!\",\n    \"comeback\": \"First you better stop waving it about like a feather duster.\"\n  },\n  {\n    \"id\": \"4\",\n    \"insult\": \"People fall at my feet when they see me coming!\",\n    \"comeback\": \"Even BEFORE they smell your breath?\"\n  },\n  {\n    \"id\": \"5\",\n    \"insult\": \"I'm not going to take your insolence sitting down!\",\n    \"comeback\": \"Your hemorroids are flaring up again eh?\"\n  },\n  {\n    \"id\": \"6\",\n    \"insult\": \"I once owned a dog that was smarter than you.\",\n    \"comeback\": \"He must have taught you everything you know.\"\n  },\n  {\n    \"id\": \"7\",\n    \"insult\": \"Nobody's ever drawn blood from me and nobody ever will.\",\n    \"comeback\": \"You run THAT fast?\"\n  },\n  {\n    \"id\": \"8\",\n    \"insult\": \"Have you stopped wearing diapers yet?\",\n    \"comeback\": \"Why? Did you want to borrow one?\"\n  },\n  {\n    \"id\": \"9\",\n    \"insult\": \"There are no words for how disgusting you are.\",\n    \"comeback\": \"Yes there are. You just never learned them.\"\n  },\n  {\n    \"id\": \"10\",\n    \"insult\": \"You make me want to puke.\",\n    \"comeback\": \"You make me think somebody already did.\"\n  },\n  {\n    \"id\": \"11\",\n    \"insult\": \"My handkerchief will wipe up your blood!\",\n    \"comeback\": \"So you got that job as janitor, after all.\"\n  },\n  {\n    \"id\": \"12\",\n    \"insult\": \"I got this scar on my face during a mighty struggle!\",\n    \"comeback\": \"I hope now you've learned to stop picking your nose.\"\n  },\n  {\n    \"id\": \"13\",\n    \"insult\": \"I've heard you are a contemptible sneak.\",\n    \"comeback\": \"Too bad no one's ever heard of YOU at all.\"\n  },\n  {\n    \"id\": \"14\",\n    \"insult\": \"You're no match for my brains, you poor fool.\",\n    \"comeback\": \"I'd be in real trouble if you ever used them.\"\n  },\n  {\n    \"id\": \"15\",\n    \"insult\": \"You have the manners of a beggar.\",\n    \"comeback\": \"I wanted to make sure you'd feel comfortable with me.\"\n  }\n];\n\nexport default allInsults;","import React, { Component } from 'react'\nimport './EndExchange.css';\n\nexport default class EndExchange extends Component {\n  render() {\n    const turn = this.props.turnType === 'insult' ? 'player' : 'pirate';\n    let msg = '';\n    if (this.props.winner === 'draw') {\n      msg = `Draw! ${turn} turn.`\n    } else {\n      msg = `${this.props.winner} wins the exchange. ${this.props.winner} goes again.`\n    }\n\n    const playerWinClass = this.props.winner === 'player' ?`EndExchange-${this.props.winner}-win` : '';\n    return (\n      <div className={`EndExchange ${playerWinClass}`}>\n        <p>{msg}</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './FightEnd.css';\n\nexport default class FightEnd extends Component {\n  static defaultProps = { modeToSet : 'fightStart'};\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.props.initNextRound();\n    this.props.updateMode(this.props.modeToSet);\n    // TODO fadeout effect\n  }\n  render() {\n    return (\n      <div className=\"FightEnd container\">\n        <p>{this.props.winner} wins! </p>\n        <button className=\"btn\" onClick={this.handleClick}>Continue</button>\n      </div>\n    )\n  }\n}\n","const randomIndex = (len) => {\n  return Math.floor(Math.random() * len);\n}\n\nconst delay = (fn, timeout = 1000) => {\n  setTimeout(() => fn(), timeout);\n}\n\nexport { randomIndex, delay };","import { randomIndex } from './helpers';\nimport allInsults from './assets/insults.js';\n\nexport default class Pirate {\n  /**\n   * @param {Number} round - the current fight round\n   * msg - the pirate's insult or comeback\n   * insultPool - the pool of insults for the pirate to randomly respond with\n   *  This is refreshed each round with all the insults\n   * turnType - whether it's the pirates turn to 'insult' or 'comeback'\n   *  This starts each round as 'comeback'\n   * roundPoints - points gained for winning exchanges\n   * matchedComeback - This starts each exchange as false\n   *  and is true if the pirate's comeback will be the correct response to the player's insult\n   */\n  constructor(round) {\n    this.msg = '';\n    this.insultPool = this.initPool(); // the pool to start each round\n    this.turnType = 'comeback';\n    this.roundPoints = 0;\n    this.matchedComeback = false;\n    this.round = round;\n  }\n\n  /**\n * @desc initialize each round's pool of insults\n * @return {Array} all the insults available\n */\n  initPool() {\n    return allInsults.map(i => i.insult);\n  }\n\n  /**\n   * @desc set this.msg to a random insult from the insult pool\n   * @return this.msg - The new insult\n   */\n  insult() {\n    if (this.insultPool.length === 0) {\n      // refill insults for now,\n      // TODO maybe end the round in the future\n      this.insultPool = this.initPool();\n    }\n\n    const pool = this.insultPool;\n\n    this.msg = pool[randomIndex(pool.length)];\n    this.insultPool = pool.filter(i => i !== this.msg);\n\n    return this.msg;\n  }\n\n  /**\n   * @desc Set the pirate response to the insult chosen by the player.\n   *  The response correctness is based on chance\n   * @param {String} playerInsult - The insult the player chose\n   * @return this.msg - the comeback\n   */\n  comeback(playerInsult) {\n    this.matchedComeback = false; // reset\n\n    const correctChance = Math.random();\n    const difficulty = this.round < 4 ? .30 : 0;\n\n    if (correctChance > difficulty) {\n      this.msg = this.getCorrectResponse(playerInsult);\n      this.matchedComeback = true;\n    } else {\n      this.msg = this.getIncorrectResponse();\n    }\n\n    return this.msg;\n  }\n\n /**\n * @desc return the comeback that is paired with the player's chosen insult\n * @param {String} playerInsult - the player's chosen insult\n * @return {String} call getIncorrectResponse if the player's insult was a nonsense one\n * @return {String} res - the correct comeback\n */\n  getCorrectResponse(playerInsult) {\n    const res = allInsults.filter(i => (\n      i.insult === playerInsult\n    ));\n\n    if (res.length === 0) {\n      // if player's insult isn't one of the matching insult/comebacks\n      return this.getIncorrectResponse();\n    } else {\n      return res[0].comeback;\n    }\n  }\n\n  /**\n  * @desc return an incorrect comeback to the player's insult\n  * @return {String} res - the incorrect comeback\n  */\n  getIncorrectResponse() {\n    let pool = [\n      \"Oh yeah?\",\n      \"I'm shaking, I'm shaking.\",\n      \"I am rubber, you are glue.\"\n    ];\n    let index = randomIndex(pool.length);\n    let res = pool[index];\n    return res ;\n  }\n\n  /**\n   * @desc remove an insult the player used from the pirate's pool so there's more variety\n   */\n  removeInsultSpokenByPlayer(insult) {\n    this.insultPool = this.insultPool.filter(i => i !== insult );\n  }\n}","const starterInsults = {\n  insults: [\n  \"You fight like a Dairy Farmer!\",\n  \"This is the END for you, you gutter crawling cur!\",\n  \"Boy are you ugly!\",\n  \"What an idiot!\"\n  ],\n  comebacks: [\n    \"How appropriate! You fight like a cow!\",\n    \"And I've got a little TIP for you, get the POINT?\",\n    \"Oh yeah?\",\n    \"I am rubber, you are glue.\",\n    \"I'm shaking, I'm shaking.\"\n  ]\n}\n\nexport default starterInsults;","import starterInsults from './assets/starterInsults.js';\n\nclass Player {\n  /**\n   * @param {Object} knownIC - the default insults/comebakcs from starterInsults.js\n   * msg - the player's chosen insult or comeback\n   * turnType  whether it's the player's turn to 'insult' or 'comeback'\n   *  This starts each round as 'insult'\n   * roundPoints - points gained for winning exchanges\n   */\n  constructor(knownIC) {\n    this.msg = '';\n    this.knownIC = knownIC;\n    this.turnType = 'insult';\n    this.roundPoints = 0;\n  }\n\n  /**\n   * @desc sets up player for the next fight round\n   */\n  reset() {\n    this.turnType = 'insult';\n    this.msg = 0;\n    this.roundPoints = 0;\n  }\n\n  /**\n   * @desc Add the new insult or comeback into the player's known insult/comeback array at the correct index\n   * @param {String} type - either insult or comeback, used to know which index to start splicing at in the given array\n   * @param {String} msg  - the insult/comeback to add\n   * @return {Array} newIC - a new array of insults or comebacks that includes the originals plus the new one\n   */\n  updateKnownIC(type, msg) {\n    const index = type === 'insults' ? -2 : -3;\n    let newIC = [...this.knownIC[type]];\n    newIC.splice(index, 0, msg);\n    return newIC;\n  }\n\n\n  /**\n   * @desc Updates the displayed choices for the player to choose from\n   * @return {Array} this.knownIC[type] - either array of insults or comebacks depending on the player's turn type\n   */\n  updateChoices() {\n    const type = this.turnType === 'insult'\n      ? 'insults' : 'comebacks';\n    return this.knownIC[type];\n  }\n\n  /**\n   * @desc Check if the player uses a nonsense insult that has no\n   * matching comeback, ex. 'Oh yeah?'\n   * @return {Boolean} index of the insult in the player's known insults\n   * being one of the nonsense insults or not\n   */\n  isNonsenseInsult() {\n    let index = this.knownIC.insults.indexOf(this.msg)\n    return index >= this.knownIC.insults.length - 2;\n  }\n}\n\nconst player = new Player(Object.assign({}, starterInsults));\n\nexport { player };","import React, { Component } from 'react'\nimport Messages from '../Messages/Messages';\nimport Choices from '../Choices/Choices';\nimport Inventory from '../Inventory/Inventory';\nimport Scroll from '../Scroll/Scroll';\nimport allInsults from '../assets/insults.js';\nimport EndExchange from '../EndExchange/EndExchange';\nimport FightEnd from '../FightEnd/FightEnd';\nimport Pirate from '../Pirate';\nimport { player } from '../Player';\nimport { delay } from '../helpers';\nimport './Fight.css';\n\nconst TIMEOUT_DELAY = 3000;\n\nexport default class Fight extends Component {\n  /**\n   *\n   * @param {Object} props - properties passed from Game component\n   * {String} exchangeWinner - who wins each exchange ('player' or 'pirate')\n   * {String} roundWinner - who wins each round ('player' or 'pirate')\n   * {Array} choices - the player's insults or comebacks to choose from\n   * {String} playerMsg - the player's chosen insult or comeback\n   * {String} pirateMsg - the pirate's randomly selected insult or comeback\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      exchangeWinner: null,\n      roundWinner : null,\n      choices: [],\n      playerMsg: '',\n      pirateMsg: ''\n    };\n\n    this.updateRound = this.updateRound.bind(this);\n    this.initNextRound = this.initNextRound.bind(this);\n    this.updatePlayerChoices = this.updatePlayerChoices.bind(this);\n    this.clearPrevExchangeDisplays = this.clearPrevExchangeDisplays.bind(this);\n    this.props.updateFightCounter();\n    this.pirate = new Pirate(this.props.round);\n  }\n\n  componentDidMount() {\n    this.updatePlayerChoices();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n  }\n\n  /**\n   * @desc Create a new pirate\n   * @return {Object} Pirate\n   */\n  initPirate() {\n    return new Pirate(this.props.round);\n  }\n\n  /**\n   * @desc initialize everything needed for a new fight round\n   */\n  initNextRound() {\n    this.initPirate();\n    this.setState({\n      roundWinner : null,\n      exchangeWinner : null,\n      playerMsg : '',\n      pirateMsg : ''\n     });\n\n     player.reset();\n  }\n\n  /**\n   * @desc Check if player's insult/comeback is correct with the pirate's insult/comeback\n   * @return {Number} matched.length\n   */\n  isMatch() {\n    const matched = allInsults.filter(i => {\n      return i[player.turnType] === player.msg && i[this.pirate.turnType] === this.pirate.msg;\n    });\n    return matched.length > 0;\n  }\n\n\n  /**\n   * @desc Set the player's choices in state\n   */\n  updatePlayerChoices() {\n    this.setState({ choices: player.updateChoices() });\n  }\n\n  /**\n   * @desc Clear the messages, previous player choices, and exchange\n   * winner in state\n   */\n  clearPrevExchangeDisplays() {\n    // TODO: BUG when a comeback is correct, the response appears above the insult\n    // clear messages and choices\n      console.log('clearPrevExchangeDisplays')\n      const pirateMsg = player.turnType === 'comeback' ? this.pirate.msg : '';\n      this.setState({\n        pirateMsg: pirateMsg,\n        playerMsg: '',\n        choices: [],\n        exchangeWinner: null\n      })\n  }\n\n  /**\n   * @desc checks to see if either the player or pirate have 2 points\n   * @return {Boolean}\n   */\n  isFightWon() {\n    return player.roundPoints === 2 || this.pirate.roundPoints === 2;\n  }\n\n  /**\n   * @desc handles the pirate actions and set up of player choices\n   * @param {String} choice - user's selected insult or comeback\n   */\n  updateRound(choice) {\n    player.msg = choice;\n    this.setState({ playerMsg : player.msg });\n\n    const prevPirateTurnType = this.pirate.turnType;\n\n    if (player.turnType === 'insult') {\n      this.pirate.removeInsultSpokenByPlayer(player.msg);\n    }\n\n    if (this.pirate.turnType === 'comeback') {\n      this.pirate.comeback(player.msg);\n    }\n\n    delay(() => {\n      this.setState({ pirateMsg : this.pirate.msg });\n\n      let winner = '';\n\n      if (this.isMatch() || player.isNonsenseInsult()) {\n        console.log('draw, swap turn types')\n        winner = 'draw';\n        this.swapTurnTypes();\n        player.roundPoints = 0;\n        this.pirate.roundPoints = 0;\n      } else {\n        if (player.turnType === 'insult') {\n          console.log('player wins')\n          winner = 'player';\n          player.roundPoints++;\n        } else {\n          console.log('pirate wins')\n          winner = 'pirate';\n          this.pirate.roundPoints++;\n        }\n      }\n\n      this.addICToKnown(prevPirateTurnType);\n\n      if (this.isGameWon()) {\n        this.props.updateMode('win');\n        return;\n      } else if (this.isFightWon()) {\n        this.endRound(winner);\n        return;\n      } else {\n        this.setState({ exchangeWinner: winner });\n\n        // set up next exchange\n        this.pirate.turnType === 'insult' && this.pirate.insult();\n        delay(this.updatePlayerChoices, TIMEOUT_DELAY * 1.3);\n        delay(this.clearPrevExchangeDisplays, TIMEOUT_DELAY / 2)\n      }\n    }, TIMEOUT_DELAY/2);\n  } // end updateRound() ==============================================\n\n  /**\n   * @desc if the insult/comeback is new to the player's list, run addIfUnknown to add it\n   * @param {String} type 'insult' or 'comeback'\n   */\n  addICToKnown(type) {\n    if (type === 'comeback' && this.pirate.matchedComeback) {\n      this.addIfUnknown('comebacks', this.pirate.msg);\n    }\n    if (type === 'insult') {\n      this.addIfUnknown('insults', this.pirate.msg);\n    }\n  }\n\n  /**\n   * @desc Add the new insult/comeback to the player's known insults/comebacks\n   * @param {String} type - 'insult' or 'comeback'\n   * @param {String} msg  - the insult or comeback to add\n   */\n  addIfUnknown(type, msg) {\n    if (player.knownIC[type].indexOf(msg) === -1) {\n      console.log(`learned ${type}: ${msg}`)\n      player.knownIC[type] = player.updateKnownIC(type, msg);\n    }\n  }\n\n\n  /**\n   * @desc swap turn types of player and pirate\n   */\n  swapTurnTypes() {\n    let nextTurnType = player.turnType === 'insult' ? 'comeback' : 'insult';\n\n    this.pirate.turnType = player.turnType;\n    player.turnType = nextTurnType;\n    console.log('swapping:', player.turnType)\n  }\n\n  /**\n   * @desc Set the round winner in state\n   * @param {String} winner - 'player' or 'pirate'\n   */\n  endRound(winner) {\n    console.log('endRound')\n    this.setState({ roundWinner : winner })\n  }\n\n  /**\n   * @desc check if the player's list of insults/comebacks contains all\n   * of the possible choices, aside from the nonsense choices\n   * @return {Boolean}\n   */\n  isGameWon() {\n    const len = allInsults.length;\n    // + 2 and + 3 are nonsense insults/comebacks with no pair\n    let res = (player.knownIC.insults.length === len + 2)\n      && (player.knownIC.comebacks.length === len + 3)\n    return res;\n  }\n\n  /**\n   * @desc render Fight content or FightEnd\n   * @return {Object} FightEnd component\n   * @return div containing Fight content\n   */\n  renderContent() {\n    const gridStyles =\n      this.state.exchangeWinner !== null ?\n      {\n        gridTemplateAreas:\n          \"'messages messages' 'end-exchange end-exchange' 'scroll-messages inventory'\"\n      }\n      :\n        {\n          gridTemplateAreas:\n            \"'messages messages' 'scroll-messages inventory'\"\n        }\n      ;\n\n    if (this.state.roundWinner !== null) {\n      return (<FightEnd\n        updateMode={this.props.updateMode}\n        winner={this.state.roundWinner}\n        initNextRound={this.initNextRound}\n        />);\n    } else {\n      return (\n        <div className=\"Fight-content\" style={gridStyles}>\n          <Messages\n            playerMsg={this.state.playerMsg}\n            pirateMsg={this.state.pirateMsg}\n            playerTurnType={player.turnType}\n          />\n\n          {\n            this.state.exchangeWinner !== null &&\n            <EndExchange\n              winner={this.state.exchangeWinner}\n              turnType={player.turnType}\n            />\n          }\n\n          <Scroll>\n            <Choices\n              choices={this.state.choices}\n              updateRound={this.updateRound}\n            />\n          </Scroll>\n          <Inventory\n            toggleInventory={this.props.toggleInventory}\n            allInsults={allInsults}\n            knownIC={player.knownIC}\n          />\n        </div>\n      )\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"Fight container\">\n        {this.renderContent()}\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport './Win.css';\n\nexport default class Win extends Component {\n  render() {\n    return (\n      <div className=\"Win container\">\n        <h1>You Win!</h1>\n        <p>You've learned all the insults and comebacks. You're good enough to fight the Sword Master.</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Instructions from '../Instructions/Instructions';\nimport Title from '../Title/Title';\nimport FightStart from '../FightStart/FightStart';\nimport Fight from '../Fight/Fight';\nimport Win from '../Win/Win';\nimport Debug from '../Debug';\nimport './Game.css';\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: 'title',\n      showInstructions : false,\n      fightCounter : 1,\n    }\n    this.updateMode = this.updateMode.bind(this);\n    this.handleShowInstructions = this.handleShowInstructions.bind(this);\n    this.updateFightCounter = this.updateFightCounter.bind(this);\n  }\n\n  updateMode(mode) {\n    this.setState({ mode })\n  }\n\n  updateFightCounter() {\n    this.setState(st => ({ fightCounter : st.fightCounter + 1 }));\n  }\n\n  handleShowInstructions(evt) {\n    let instructions = document.getElementsByClassName('Instructions')[0];\n    if (this.state.showInstructions) {\n      instructions.style.animation = 'pullup 1s'\n    }\n\n    setTimeout(() => {\n      this.setState(st => ({ showInstructions: !st.showInstructions }));\n    }, 300);\n  }\n\n  renderMode() {\n    let mode = this.state.mode;\n    if (mode === 'title') return <Title updateMode={this.updateMode} />;\n    else if (mode === 'fightStart')  {\n      return <FightStart\n                updateMode={this.updateMode}\n                fightCounter={this.state.fightCounter}\n              />\n    }\n    else if (mode === 'fight') {\n      return <Fight\n                updateMode={this.updateMode}\n                updatePlayerTurn={this.updatePlayerTurn}\n                updateRoundWin={this.updateRoundWin}\n                updateFightCounter={this.updateFightCounter}\n                round={this.state.fightCounter}\n                gameWon={this.gameWon}\n      />\n    }\n    else if (mode === 'win') {\n      return <Win />\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Game container\">\n\n        {/* <Debug  updateMode={this.updateMode} /> */}\n\n        <button className=\"btn\" id=\"Game-instructions-btn\"\n          onClick={this.handleShowInstructions}>\n          {this.state.showInstructions ? 'Hide' : 'Show'} Instructions\n        </button>\n        {this.state.showInstructions && <Instructions />}\n        {this.renderMode()}\n      </div>\n    )\n  }\n}\n\n","import React, { Component } from 'react'\nimport './Debug.css';\n\nexport default class Debug extends Component {\n  render() {\n    return (\n      <div className=\"Debug\">\n        <p>[ Debug ]</p>\n        <button onClick={() => this.props.updateMode('title')}>Title Mode</button>\n        <button onClick={() => this.props.updateMode('fightStart')}>FightStart Mode</button>\n        <button onClick={() => this.props.updateMode('fight')}>Fight Mode</button>\n        <button onClick={() => this.props.updateMode('fightEnd')}>FightEnd Mode</button>\n        <button onClick={() => this.props.updateMode('win')}>Win Mode</button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './Info.css';\n\nexport default class Info extends Component {\n  render() {\n    return (\n      <div className=\"Info container\">\n        <p>Insult Swordfighting is a mechanic from the <span><a href=\"https://en.wikipedia.org/wiki/Monkey_Island_(series)\" target=\"_blank\" rel=\"noopener noreferrer\">Monkey Island</a></span> point-and-click adventure game series, created by Ron Gilbert and developed by LucasArts. All of the insults/comebacks here are from The Secret of Monkey Island, written by Ron Gilbert, Dave Grossman, and Tim Schafer.</p>\n        <p>I re-created my version of the mechanic with React as a learning experience and for fun. </p>\n        <p><a href=\"https://github.com/robotspacefish\" target=\"_blank\" rel=\"noopener noreferrer\">robotspacefish</a>!</p>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport './App.css';\nimport Game from './Game/Game';\nimport Info from './Info/Info';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n      <footer>\n        <Info />\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}